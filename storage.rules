rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // User profile images: only the user can upload/delete their own image
    match /users/{userId}/{fileName} {
      allow read: if true; // Allow public read access to profile images
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Driver profile images: only the driver can upload/delete their own image
    match /drivers/{driverId}/{fileName} {
      allow read: if true; // Allow public read access to driver images
      allow write: if request.auth != null && request.auth.uid == driverId;
    }

    // Audio recordings for trips: stored under audio/trips/{tripId}/{fileName}
    match /audio/trips/{tripId}/{fileName} {
      function trip() {
        return get(/databases/$(database)/documents/trips/$(tripId)).data;
      }
      // Only the passenger who owns the trip can upload audio
      allow write: if request.auth != null && request.auth.uid == trip().passengerId;
      // The passenger or an admin_compliance user can read audio
      allow read: if request.auth != null &&
        (request.auth.uid == trip().passengerId || request.auth.token.admin_compliance == true);
    }

    // Deny all other access by default
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
