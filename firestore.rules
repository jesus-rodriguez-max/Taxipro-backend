rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for roles
    function hasAdminRole() {
      return request.auth != null && (
        request.auth.token.admin == true || request.auth.token.role == 'admin'
      );
    }
    function hasComplianceRole() {
      return request.auth != null && (
        request.auth.token.compliance == true || request.auth.token.role == 'compliance'
      );
    }
    // Helper: solo permitir que el chofer modifique estrictamente el campo billingConsent
    function driverSetsOnlyBillingConsent(driverId) {
      return request.auth != null && request.auth.uid == driverId
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['billingConsent']);
    }
    // Helper: garantizar que no se modifique el campo billingConsent
    function noChangeToBillingConsent() {
      return !request.resource.data.diff(resource.data).changedKeys().hasAny(['billingConsent']);
    }

    // --- USERS ---
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null
        && request.resource.data.acceptedTerms == true
        && request.resource.data.acceptedPrivacy == true;
      allow read: if hasAdminRole();
    }

    // --- DRIVERS ---
    match /drivers/{driverId} {
      // Creación del registro de chofer requiere consentimiento de cobro explícito
      allow create: if request.auth != null && request.auth.uid == driverId
        && request.resource.data.status == 'pending';

      // Lectura: chofer dueño, admin o compliance
      allow read: if request.auth != null && (request.auth.uid == driverId || hasAdminRole() || hasComplianceRole());

      // Actualizaciones generales: admin o compliance, sin modificar billingConsent
      allow update: if (hasAdminRole() || hasComplianceRole()) && noChangeToBillingConsent();

      // Excepción: el propio chofer puede marcar/actualizar únicamente el campo billingConsent
      allow update: if driverSetsOnlyBillingConsent(driverId);
      
      match /documents/{docId} {
        allow read: if request.auth != null && (request.auth.uid == driverId || hasAdminRole());
        allow write: if hasAdminRole();
      }
    }

    // --- TRIPS ---
    match /trips/{tripId} {
      allow create: if request.auth != null
        && request.resource.data.passengerId == request.auth.uid
        && request.resource.data.status == 'pending';
      allow read: if request.auth != null
        && (resource.data.passengerId == request.auth.uid || resource.data.driverId == request.auth.uid);
      allow update: if hasAdminRole() || hasComplianceRole();
      
      match /logs/{logId} {
        allow read: if request.auth != null;
        allow write: if hasAdminRole();
      }
    }

    // --- SHARED TRIPS ---
    match /shared_trips/{shareToken} {
      allow read: if resource.data.isActive == true;
      allow create, update, delete: if hasAdminRole();
    }

    // --- SAFETY PROFILES ---
    match /safety_profiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --- FARES ---
    match /fares/tariffs {
      allow read: if request.auth != null;
      allow write: if hasAdminRole();
    }

    // --- RATINGS ---
    match /ratings/{ratingId} {
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null
        && (resource.data.userId == request.auth.uid || hasAdminRole());
      allow update, delete: if false; // ratings son inmutables
    }
  }
}

service firebase.storage {
  // Helper functions for roles (storage service)
  function hasAdminRole() {
    return request.auth != null && (
      request.auth.token.admin == true || request.auth.token.role == 'admin'
    );
  }
  function hasComplianceRole() {
    return request.auth != null && (
      request.auth.token.compliance == true || request.auth.token.role == 'compliance'
    );
  }

  match /b/{bucket}/o {
    // Trip audio
    match /trip_audio/{tripId}/{userId}/{chunkId} {
      allow write: if request.auth != null && request.auth.uid == userId;
      allow read: if hasAdminRole() || hasComplianceRole();
    }
  }
}