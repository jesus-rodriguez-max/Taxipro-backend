
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Funciones de Ayuda ---
    function isAuth() { return request.auth != null; }
    function getRole() { return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role; }
    function isAdmin() { return isAuth() && getRole() == 'admin'; }
    function isCompliance() { return isAuth() && getRole() == 'compliance'; }
    function isDriver() { return isAuth() && getRole() == 'driver'; }
    function isPassenger() { return isAuth() && getRole() == 'passenger'; }
    function isSelf(uid) { return isAuth() && request.auth.uid == uid; }

    // --- Colecciones Principales ---
    match /users/{userId} {
      allow read, write: if isSelf(userId);
      allow list, get: if isAdmin();
    }

    match /drivers/{driverId} {
      allow read, write: if isSelf(driverId);
      allow list, get: if isAdmin();
    }

    match /trips/{tripId} {
      function isTripPassenger() { return isAuth() && request.auth.uid == resource.data.passengerId; }
      function isTripDriver() { return isAuth() && request.auth.uid == resource.data.driverId; }
      
      allow get: if isTripPassenger() || isTripDriver() || isAdmin() || isCompliance();
      allow list: if isAdmin() || isCompliance();
      
      // El pasajero crea el viaje, pero el backend lo enriquece y gestiona.
      allow create: if isTripPassenger();
      // Solo el backend (con credenciales de admin) puede modificar estados críticos.
      allow update, delete: if isAdmin();

      // Subcolección para logs de seguridad
      match /safety_logs/{logId} {
        allow create: if isTripPassenger(); // El pasajero (cliente) registra el evento
        allow read: if isTripPassenger() || isAdmin() || isCompliance();
        allow write, delete: if isAdmin();
      }
    }

    // --- Módulo de Seguridad ---
    match /safety_profiles/{userId} {
      // El usuario es dueño de su perfil de seguridad
      allow read, write: if isSelf(userId);
      // El rol de compliance puede leer perfiles en caso de una investigación
      allow get: if isCompliance() || isAdmin();
    }

    match /shared_trips/{shareToken} {
      // El backend (admin) crea y escribe. La lectura es pública para los enlaces.
      allow get: if resource.data.active == true;
      allow write: if isAdmin();
  }

    match /ratings/{ratingId} {
      allow read: if isSelf(resource.data.passengerId) ||
                     (isDriver() && resource.data.driverId == request.auth.uid) ||
                     isAdmin() ||
                     isCompliance();

      allow create: if isPassenger() &&
                       isSelf(request.resource.data.passengerId) &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5 &&
                       exists(/databases/$(database)/documents/trips/$(request.resource.data.tripId)) &&
                       get(/databases/$(database)/documents/trips/$(request.resource.data.tripId)).data.status == 'completed' &&
                       get(/databases/$(database)/documents/trips/$(request.resource.data.tripId)).data.passengerId == request.auth.uid;

      allow write, delete: if isAdmin();
    }
}
