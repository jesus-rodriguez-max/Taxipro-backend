rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth.token.admin == true;
    }

    function isOwner(uid) {
      return isAuth() && request.auth.uid == uid;
    }

    // Los campos de solo lectura para el cliente, solo modificables por el backend (admin)
    function isBackendWrite(unchangedFields) {
      return isAdmin() && request.resource.data.diff(request.resource.data).affectedKeys().hasOnly(unchangedFields) == false;
    }

    // Users: Propietario o admin pueden leer/escribir, pero con restricciones.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // El usuario puede actualizar sus datos, pero no su saldo pendiente.
      allow update: if (isOwner(userId) && !('pendingBalance' in request.resource.data.diff(resource.data).affectedKeys())) || isAdmin();
      allow create: if isOwner(userId);
    }

    // Drivers: Propietario o admin pueden leer/escribir, pero con restricciones.
    match /drivers/{driverId} {
      allow read: if isOwner(driverId) || isAdmin();
      // El chofer puede actualizar su perfil, pero no su estado de aprobación o membresía.
      allow update: if (isOwner(driverId) && !('isApproved' in request.resource.data.diff(resource.data).affectedKeys() || 'membership' in request.resource.data.diff(resource.data).affectedKeys())) || isAdmin();
      allow create: if isOwner(driverId);
    }

    // Trips: Reglas complejas para la máquina de estados.
    match /trips/{tripId} {
      allow read: if isAuth() && (resource.data.passengerId == request.auth.uid || resource.data.driverId == request.auth.uid || isAdmin());
      
      // Creación: solo el pasajero, con estado PENDING.
      allow create: if isOwner(request.resource.data.passengerId) && request.resource.data.status == 'pending';

      // Actualización: La lógica principal está en las funciones, las reglas solo validan transiciones simples.
      allow update: if isAuth() && (
        isAdmin() || // El admin puede hacer cualquier cosa

        // Pasajero cancela (solo a estados permitidos, la penalización la decide el backend)
        (isOwner(resource.data.passengerId) && 
          request.resource.data.status == 'cancelled_by_passenger' && 
          resource.data.status in ['pending', 'assigned']
        ) ||

        // Chofer acepta el viaje
        (isOwner(request.resource.data.driverId) && 
          request.resource.data.status == 'assigned' && 
          resource.data.status == 'pending'
        ) ||

        // Chofer actualiza estado (solo transiciones simples, el resto lo hace el backend)
        (isOwner(resource.data.driverId) && 
          (request.resource.data.status in ['active', 'completed'] || request.resource.data.destination != resource.data.destination)
        )
      );

      // Nadie puede modificar los campos de tarifa o pago directamente.
      // Esto fuerza a que toda la lógica de cobro pase por las Cloud Functions.
      allow update: if request.resource.data.fare == resource.data.fare && 
                       request.resource.data.payment == resource.data.payment;

      allow delete: if false;
    }

    // --- Colecciones de solo lectura para clientes ---

    match /stripe_events/{eventId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    match /safety_profiles/{uid} {
      allow read: if isOwner(uid) || isAdmin();
      allow write: if isOwner(uid);
    }
  }
}